diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4a82c92..8f1eb79 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -109,6 +109,11 @@ write_basic_package_version_file(${PROJECT_NAME}-config-version.cmake
 #pkg-config file
 configure_file(${PROJECT_NAME}.pc.in ${LIBRARY_NAME}.pc @ONLY)
 
+if(DEFINED ENV{LIB_FUZZING_ENGINE})
+  add_executable(fuzz_ParseFromString fuzzer/fuzz_ParseFromString.cc)
+  target_link_libraries(fuzz_ParseFromString ${LIBRARY_NAME} $ENV{LIB_FUZZING_ENGINE})
+endif()
+
 #Installation
 install(TARGETS
   ${LIBRARY_NAME}
diff --git a/fuzzer/fuzz_ParseFromString.cc b/fuzzer/fuzz_ParseFromString.cc
new file mode 100644
index 0000000..aa45f89
--- /dev/null
+++ b/fuzzer/fuzz_ParseFromString.cc
@@ -0,0 +1,26 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <stdarg.h>
+#include <string.h>
+
+#define TINYOBJLOADER_IMPLEMENTATION // define this in only *one* .cc
+#include "tiny_obj_loader.h"
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
+    tinyobj::ObjReaderConfig reader_config;
+    tinyobj::ObjReader reader;
+    if (Size < 2) {
+        return 0;
+    }
+    for (size_t i = 0; i < Size-1; i++) {
+        if (Data[i] == 0) {
+            std::string obj_text (reinterpret_cast<const char*>(Data), i);
+            std::string mtl_text (reinterpret_cast<const char*>(Data+i+1), Size-i-1);
+            reader.ParseFromString(obj_text, mtl_text,reader_config);
+            return 0;
+        }
+    }
+    return 0;
+}
+
