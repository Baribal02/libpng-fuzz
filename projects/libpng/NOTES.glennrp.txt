
Installed docker-ce
======================

in libpng/Dockerfile

-MAINTAINER mmoroz@chromium.org
+MAINTAINER glennrp@gmail.com

======================

in libpng/build.sh

disable libpng WARNING:
-cat scripts/pnglibconf.dfa | sed -e "s/option STDIO/option STDIO disabled/" \
+cat scripts/pnglibconf.dfa | \
+  sed -e "s/option STDIO/option STDIO disabled/" \
+      -e "s/option WARNING /option WARNING disabled/" \

Don't build tools, just libpng:
-make -j$(nproc) all
+make -j$(nproc) libpng16.la

======================

In libpng/libpng_read_fuzzer.cc
added PNG_CLEANUP macro and invoked it 4 places
(in setjmp blocks and at final return).

======================

Attempted to run the fuzzer locally as suggested
in ... with

clang++ -g -fsanitize=address -fsanitize-coverage=trace-pc-guard \
  libpng_read_fuzzer.cc libFuzzer.a
./a.out

but it couldn't find libFuzzer.a.  It seems that my clang
is too old because libFuzzer.a is supposed to be included
in clang versions > 20 April 2017.

======================

So I ran apt-get dselect-upgrade clang
but it appears to be upgrading everything.
It took nearly an hour, but didn't change
clang or clang++ from version 3.8.0

======================

Tried removing the unrecognized -fsanitize-coverage option
but then the compiler complains about nullptr which is
where I was the other day trying to compile the target
manually.

======================

Went to the clang web site. Apparently the required version
is 4.0.1, July 2017 (4.0.0 is prior to 20 April). 4.0.0
is available for Ubuntu, 4.0.1 is not, so I downloaded the
Debian-8 version.

======================

Looks good:

studio> /home/glennrp/Clang/clang+llvm-4.0.1-x86_64-linux-gnu-debian8/bin/clang --version
clang version 4.0.1 (tags/RELEASE_401/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/glennrp/Clang/clang+llvm-4.0.1-x86_64-linux-gnu-debian8/bin

======================

But, it still doesn't like the "nullptr" in  libpng_read_fuzzer.cc:

libpng_read_fuzzer.cc:27:22: warning: in-class initialization of non-static data
      member is a C++11 extension [-Wc++11-extensions]
  png_infop info_ptr = nullptr;
                     ^
and a dozen similar messages

======================

Copied the 
/home/glennrp/Clang/clang+llvm-4.0.1-x86_64-linux-gnu-debian8/*
into /usr, so "clang++ --version" reports

clang version 4.0.1 (tags/RELEASE_401/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/bin

======================

But, it still doesn't like the "nullptr" in  libpng_read_fuzzer.cc.

======================

Changed local-run.sh to add "-std=c++11":

  clang++ -std=c++11 -I. -lz -I/usr/include \
  -fsanitize=address -fsanitize-coverage=trace-pc-guard \
  libpng_read_fuzzer.cc -libFuzzer.a
  ./a.out

This still can't find libFuzzer.a (I can't find it anywhere either; I
thought it was supposed to be part of Clang).

======================

http://llvm.org/docs/LibFuzzer.html says to use -fsanitize=fuzzer,address
but no such luck.  "unsupported argument 'fuzzer'"

======================
Ran

git clone \
  https://chromium.googlesource.com/chromium/llvm-project/llvm/lib/Fuzzer
./Fuzzer/build.sh  # Produces libFuzzer.a

Changed local-run.sh to

  clang++ -std=c++11 -I. -lz -I/usr/include \
  -fsanitize=address -fsanitize-coverage=trace-pc-guard \
  libpng_read_fuzzer.cc libFuzzer.a
  ./a.out

Seems to have trouble finding png.h:
libpng_read_fuzzer.cc:(.text+0x51): undefined reference to `png_get_io_ptr'
etc.

======================

Added -Ilibpng -Llibpng to the commandline. This found libpng, so there's
only one error left: can't find memcpy:

libpng_read_fuzzer.cc:48:3: error: use of undeclared identifier 'memcpy'
  memcpy(data, buf_state->data, length);
  ^
1 error generated.

======================

Added "#include <string.h>" to libpng_read_fuzzer.cc

=======================

in build.sh, reverted to building everything:

-make -j$(nproc) libpng16.la
+make -j$(nproc) all

in local-run.sh, changed
-libpng16.1a to .libs/libpng16.a, so we now have:

  clang++ -std=c++11 -I.-I/usr/include \
  -Ilibpng -Llibpng \
  -fsanitize=address -fsanitize-coverage=trace-pc-guard \
  libpng_read_fuzzer.cc libFuzzer.a libpng/.libs/libpng16.a -lz
  ./a.out

This appears to work.

=======================

Disable WRITE support in libpng
Don't build libpng tools, just libpng16.la
with changes in build.sh:

# Disable logging via library build configuration control.
cat scripts/pnglibconf.dfa | \
  sed -e "s/option STDIO/option STDIO disabled/" \
      -e "s/option WARNING /option WARNING disabled/" \
      -e "s/option WRITE enables WRITE_INT_FUNCTIONS/option WRITE disabled/" \
> scripts/pnglibconf.dfa.temp
mv scripts/pnglibconf.dfa.temp scripts/pnglibconf.dfa

# build the library.
autoreconf -f -i
./configure
make -j$(nproc) clean
make -j$(nproc) libpng16.la

=======================

  Rebuild libpng with
  cd libpng
  ../build.sh

  then local_run.sh which now contains

  clang++ -std=c++11 -I. -I/usr/include \
  -Ilibpng -Llibpng \
  -fsanitize=address -fsanitize-coverage=trace-pc-guard \
  libpng_read_fuzzer.cc libFuzzer.a libpng/.libs/libpng16.a -lz
  ./a.out -runs=5 -max_len=16000

  Seems to be running fine.

=======================



