diff --git a/src/backend/Makefile b/src/backend/Makefile
index 9706a95848..f901d1153c 100644
--- a/src/backend/Makefile
+++ b/src/backend/Makefile
@@ -17,7 +17,7 @@ subdir = src/backend
 top_builddir = ../..
 include $(top_builddir)/src/Makefile.global
 
-SUBDIRS = access bootstrap catalog parser commands executor foreign lib libpq \
+SUBDIRS = access bootstrap catalog parser commands executor foreign fuzzer lib libpq \
 	main nodes optimizer partitioning port postmaster \
 	regex replication rewrite \
 	statistics storage tcop tsearch utils $(top_builddir)/src/timezone \
@@ -43,6 +43,10 @@ OBJS = \
 	$(top_builddir)/src/common/libpgcommon_srv.a \
 	$(top_builddir)/src/port/libpgport_srv.a
 
+TMPVAR := $(OBJS)
+OBJS_WITHOUT_FUZZER = $(filter-out fuzzer/objfiles.txt, $(TMPVAR))
+OBJS_WITHOUT_MAIN = $(filter-out main/objfiles.txt, $(TMPVAR))
+
 # We put libpgport and libpgcommon into OBJS, so remove it from LIBS; also add
 # libldap and ICU
 LIBS := $(filter-out -lpgport -lpgcommon, $(LIBS)) $(LDAP_LIBS_BE) $(ICU_LIBS)
@@ -56,15 +60,19 @@ endif
 
 ##########################################################################
 
-all: submake-libpgport submake-catalog-headers submake-utils-headers postgres $(POSTGRES_IMP)
+all: submake-libpgport submake-catalog-headers submake-utils-headers postgres fuzzer/parser_fuzzer $(POSTGRES_IMP)
 
 ifneq ($(PORTNAME), cygwin)
 ifneq ($(PORTNAME), win32)
 ifneq ($(PORTNAME), aix)
 
-postgres: $(OBJS)
+postgres: $(OBJS_WITHOUT_FUZZER)
 	$(CC) $(CFLAGS) $(call expand_subsys,$^) $(LDFLAGS) $(LDFLAGS_EX) $(export_dynamic) $(LIBS) -o $@
 
+
+fuzzer/parser_fuzzer: $(OBJS_WITHOUT_MAIN)
+	$(CXX) $(CFLAGS) $(call expand_subsys,$^) -o $@ $(LIB_FUZZING_ENGINE)
+
 endif
 endif
 endif
diff --git a/src/backend/fuzzer/Makefile b/src/backend/fuzzer/Makefile
new file mode 100644
index 0000000000..c768ad81af
--- /dev/null
+++ b/src/backend/fuzzer/Makefile
@@ -0,0 +1,24 @@
+#-------------------------------------------------------------------------
+#
+# Makefile for the fuzzer module
+#
+# src/backend/fuzzer/Makefile
+#
+#-------------------------------------------------------------------------
+
+subdir = src/backend/fuzzer
+top_builddir = ../../..
+include $(top_builddir)/src/Makefile.global
+
+OBJS = parser_fuzzer.o
+
+
+# parser_fuzzer.o: parser_fuzzer.c
+# 	clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I$(
+# includedir_server) -I$(
+# includedir_internal) -c $
+#< -o $
+#@
+
+include $(top_srcdir)/src/backend/common.mk
+
diff --git a/src/backend/fuzzer/parser_fuzzer.c b/src/backend/fuzzer/parser_fuzzer.c
new file mode 100644
index 0000000000..2d0b0cd9a4
--- /dev/null
+++ b/src/backend/fuzzer/parser_fuzzer.c
@@ -0,0 +1,75 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "postgres.h"
+#include "parser/gramparse.h"
+#include "parser/parser.h"
+#include "utils/memutils.h"
+
+const char *progname;
+/*
+static inline void *
+ pg_malloc_internal(size_t size, int flags)
+ {
+     void       *tmp;
+ 
+     // Avoid unportable behavior of malloc(0)
+     if (size == 0)
+         size = 1;
+     tmp = malloc(size);
+     if (tmp == NULL)
+     {
+         if ((flags & MCXT_ALLOC_NO_OOM) == 0)
+         {
+             fprintf(stderr, _("out of memory\n"));
+             exit(EXIT_FAILURE);
+         }
+         return NULL;
+     }
+ 
+     if ((flags & MCXT_ALLOC_ZERO) != 0)
+         MemSet(tmp, 0, size);
+     return tmp;
+ }
+
+void *
+ pg_malloc_extended(size_t size, int flags)
+ {
+     return pg_malloc_internal(size, flags);
+ }
+*/
+
+
+/*
+** Main entry point.  The fuzzer invokes this function with each
+** fuzzed input.
+*/
+int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
+  MemoryContextInit();
+  sigjmp_buf local_sigjmp_buf;
+  char* query = (char*) malloc(size+1);
+  query[size] = '\0';
+  for(int i=0; i<size; i++){
+    query[i] = (char)(data[i]);
+  }
+  
+  if(!sigsetjmp(local_sigjmp_buf,0)){
+    PG_exception_stack = &local_sigjmp_buf;
+    raw_parser(query);
+  }
+  free(query);
+  FlushErrorState();
+  MemoryContextDelete(TopMemoryContext);
+  return 0;
+}
